# ==================
# Project definition
# ==================

# Derived from https://peps.python.org/pep-0621/

[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=42", # At least v42 of setuptools required.
  "versioningit",
]

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.0"

[project]
name = "pueblo"
description = "Pueblo - a Python toolbox library."
readme = "README.md"
requires-python = ">=3.8"
license = { text = "LGPL 3, EUPL 1.2" }
keywords = [
  "general purpose",
  "library",
  "mixed",
  "pueblo",
]
authors = [
  {name = "Andreas Motl", email = "andreas.motl@panodata.org"},
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Intended Audience :: Customer Service",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Telecommunications Industry",
  "License :: OSI Approved :: European Union Public Licence 1.2 (EUPL 1.2)",
  "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Unix",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Communications",
  "Topic :: Education",
  "Topic :: Software Development :: Libraries",
  "Topic :: Text Processing",
  "Topic :: Utilities",
]

dynamic = [
  "version",
]

dependencies = [
  'importlib-metadata; python_version <= "3.7"',
  "platformdirs<4",
]

[project.optional-dependencies]
all = [
  "pueblo[cli,env,ngr,nlp,web]",
]
cli = [
  "click<9",
  "click-aliases<2",
  "colorlog<7",
]
develop = [
  "black<24",
  "mypy==1.6.1",
  "poethepoet<1",
  "pyproject-fmt<1.4,>=1.3",
  "ruff==0.1.3",
  "validate-pyproject<0.16",
]
env = [
  "python-dotenv<2",
]
ngr = [
]
nlp = [
  "langchain==0.0.325",
  "unstructured<0.11",
]
release = [
  "build<2",
  "twine<5",
]
test = [
  "nbclient<0.9",
  "pytest<8",
  "pytest-cov<5",
  "pytest-mock<4",
]
web = [
  "requests-cache<2",
]
[project.scripts]
ngr = "pueblo.ngr.cli:main"
pueblo = "pueblo.cli:cli"
[tool.setuptools]
# https://setuptools.pypa.io/en/latest/userguide/package_discovery.html
packages = ["pueblo"]

[project.urls]
changelog = "https://github.com/pyveci/pueblo/blob/main/CHANGES.md"
documentation = "https://github.com/pyveci/pueblo"
homepage = "https://github.com/pyveci/pueblo"
repository = "https://github.com/pyveci/pueblo"
[tool.black]
line-length = 120

# extend-exclude = ""

[tool.isort]
profile = "black"
skip_glob = "**/site-packages/**"
skip_gitignore = false

[tool.pytest.ini_options]
minversion = "2.0"
addopts = """
  -rfEX -p pytester --strict-markers --verbosity=3
  --cov --cov-report=term-missing --cov-report=xml
  --capture=no
  --ignore=tests/ngr
  """
log_level = "DEBUG"
log_cli_level = "DEBUG"
testpaths = ["tests"]
xfail_strict = true
markers = [
  "ngr",
]

[tool.coverage.run]
branch = false
source = ["pueblo"]
omit = [
    "tests/*",
]

[tool.coverage.report]
fail_under = 0
show_missing = true
omit = [
    "tests/*",
]

[tool.mypy]
packages = ["pueblo"]
exclude = [
]
check_untyped_defs = true
ignore_missing_imports = true
implicit_optional = true
install_types = true
no_implicit_optional = true
non_interactive = true
show_error_codes = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true

[tool.ruff]
line-length = 120

select = [
  # Bandit
  "S",
  # Bugbear
  "B",
  # Builtins
  "A",
  # comprehensions
  "C4",
  # eradicate
  "ERA",
  # flake8-2020
  "YTT",
  # isort
  "I",
  # pandas-vet
  "PD",
  # print
  "T20",
  # Pycodestyle
  "E",
  "W",
  # Pyflakes
  "F",
  # return
  "RET",
]

extend-exclude = [
  "example_*",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # `xxx` imported but unused
"tests/*" = ["S101"]  # Use of `assert` detected


# ===================
# Tasks configuration
# ===================

[tool.poe.tasks]
format = [
  { cmd = "black ." },
  # Configure Ruff not to auto-fix (remove!):
  # Ignore unused imports (F401), unused variables (F841), `print` statements (T201), and commented-out code (ERA001).
  { cmd = "ruff --fix --ignore=ERA --ignore=F401 --ignore=F841 --ignore=T20 --ignore=ERA001 ." },
  { cmd = "pyproject-fmt pyproject.toml" },
]

lint = [
  { cmd = "ruff ." },
  { cmd = "black --check ." },
  { cmd = "validate-pyproject pyproject.toml" },
  { cmd = "mypy" },
]
test = "pytest -m 'not ngr'"
test-full = "pytest"
build = { cmd = "python -m build" }
check = ["lint", "test"]
check-full = ["lint", "test-full"]

release = [
  { cmd = "python -m build" },
  { cmd = "twine upload --skip-existing dist/*.tar.gz dist/*.whl" },
]
